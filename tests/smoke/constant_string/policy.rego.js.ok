let function_bodies = {};
let plans = {};
const opa_builtins = {
  plus: (args) => { return { t: 'number', v: args[0].v + args[1].v }; },
};
const internal_to_external_impl = {
  number: (x) => { return x },
  string: (x) => { return x },
  object: (x) => {
    let result = {};
    for (let k in x) {
      result[k] = internal_to_external(x[k]);
    }
    return result;
  },
};
const internal_to_external = (x) => {
  if (Array.isArray(x)) {
    if (x.length === 1) {
      return internal_to_external(x[0]);
    } else {
      let result = [];
      x.forEach(e => result.push(internal_to_external(e)));
      return result;
    }
  } else if (x === undefined || x.t === undefined) {
    return undefined;
  } else {
    return internal_to_external_impl[x.t](x.v);
  }
};
const external_to_internal = (x) => {
  const t = typeof x;
  if (t === 'number') {
    return { t: 'number', v: x };
  } else if (t === 'object') {
    let result = { t: 'object', v: {}};
    for (let k in x) {
      result.v[k] = external_to_internal(x[k]);
    }
    return result;
  } else {
    return undefined;
  }
};
module.exports.main = (input, data) => {
  return internal_to_external(plans.main(external_to_internal(input), external_to_internal(data)));
};
const opa_get_function_impl = (f) => {
  if (typeof f === 'number') {
    return function_bodies[f];
  } else {
    return f.builtin_func;
  }
};
const static_strings = [
  "result",
  "foo",
];
const function_signatures = [
  { name: "g0.data.smoke.constant_string",
    arg_index: [
      0,
      1,
    ],
    retval_index: 2
  },
];
function_bodies[0] = (args) => { let retval = null; let locals = []; function_signatures[0].arg_index.forEach((a, i) => { locals[a] = args[i]; });
  (() => {
    locals[3] = undefined;
    if (JSON.stringify(Boolean(true)) === JSON.stringify(Boolean(false))) return;
    if (locals[3] !== undefined) return; locals[3] = {t: 'string', v: "foo"};
  })();
  (() => {
    if (locals[3] === undefined) return;
    if (locals[2] !== undefined) return; locals[2] = locals[3];
  })();
  (() => {
    retval = locals[2];
  })();
return retval; };
plans["main"] = (input, data) => { let locals = [input, data]; let result = [];
  (() => {
    locals[2] = (() => { let args = [];
      args[0] = locals[0];
      args[1] = locals[1];
    return opa_get_function_impl(0)(args)})();
    locals[3] = locals[2];
    locals[4] = { t: 'object', v: {} };
    locals[4].v["result"] = locals[3];
    result.push(locals[4]);
  })();
return result; };
module.exports.plans = plans;
