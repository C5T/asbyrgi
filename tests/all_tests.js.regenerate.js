const fs = require('fs');

let rego = [];
process.argv.forEach(fn => { if (fn.match(/.*\.rego$/)) rego.push(fn); });

if (!rego.length) {
  console.error('Provide one or more `.rego` files as the input, or use the `gen_all_js_tests.sh` script.');
  process.exit(1);
}

console.log('// AUTOGENERATED FILE, do not edit.');
console.log('// To run the tests: node_modules/mocha/bin/mocha.js tests/all_tests.js');
console.log('//               Or: open `tests/mocha.html` in the browser.');
console.log('');

console.log('const expect = (typeof window === "undefined") ? require("chai").expect : chai.expect;');
console.log('');

console.log('const get_policy_main = (fn) => {');
console.log('  try {');
console.log('    if (typeof window === "undefined") {');
console.log('      return require(`./${fn}.js`).main;');
console.log('    } else {');
console.log('      return exported_mains[`${fn}.js`];');
console.log('    }');
console.log('  } catch(e) {');
;
console.log('    console.error(`Error loading \\`./${fn}.js\\`, did you run \\`./scripts/gen_all_js.sh\\`?`);');
console.log('    process.exit(1);');
console.log('  }');
console.log('};');
console.log('');

let cases = {};

const prepareTestCase = (text) => {
  const fields = text.split('\t');
  const input = JSON.parse(fields[0]);
  if (fields.length === 1) {
    return {
      desc: JSON.stringify(input),
      input: input,
      data: null
    };
  } else {
    let body = {
      data: {}
    };
    for (let i = 1; i < fields.length; ++i) {
      const elem = JSON.parse(fields[i]);
      const keys = Object.keys(elem);
      if (keys.length !== 1) {
        console.error('Each `data` JSON, after the tab, should only have one key.');
        process.exit(1);
      }
      let placeholder = body;
      let placeholder_key = 'data';
      let step_made = false;
      keys[0].split('.').forEach(k => {
        step_made = true;
        if (typeof placeholder[placeholder_key] != 'object') {
          placeholder[placeholder_key] = {};
        }
        placeholder = placeholder[placeholder_key];
        placeholder_key = k;
      });
      if (!step_made) {
        console.error('Each `data` JSON, after the tab, should only have one key, and this key should not be empty.');
        process.exit(1);
      }
      placeholder[placeholder_key] = elem[keys[0]];
    }
    return {
      desc: JSON.stringify(input) + ' + ' + JSON.stringify(body.data),
      input: input,
      data: body.data
    };
  }
};

rego.forEach(fn => {
  let path = fn.split('/');
  path[path.length - 1] = 'tests.json';
  const tests_path = path.join('/');
  const testsWithOptionalData = (() => {
    try {
      return fs.readFileSync(tests_path, {encoding:'utf8'}).split('\n').filter(x => x !== '').map(prepareTestCase);
    } catch(e) {
      console.error(`Error reading '${tests_path}', something's wrong with the '.rego' files in the repo.`);
      process.exit(1);
    }
  })();
  const goldens_path = fn + '.goldens.json';
  const goldens = (() => {
    try {
      return fs.readFileSync(goldens_path, {encoding:'utf8'}).split('\n').filter(x => x !== '').map(JSON.parse);
    } catch(e) {
      console.error(`Error reading '${goldens_path}', did you run './scripts/gen_all_goldens.sh'?`);
      process.exit(1);
    }
  })();
  if (testsWithOptionalData.length !== goldens.length) {
    console.error(`The number of tests and goldens don't match for '${fn}'.`);
    process.exit(1);
  }
  cases[fn] = { tests: testsWithOptionalData, goldens };
});

Object.keys(cases).sort().forEach(fn => {
  const t = cases[fn];
  console.log(``);
  console.log(`describe('${fn}', () => {`);
  console.log(`  const policy = get_policy_main('${fn}');`);
  for (let i = 0; i < t.tests.length; ++i) {
    // NOTE(dkorolev): The outer `JSON.stringify` is needed to escape the quote in in `"Zed's dead baby."`. =)
    console.log(`  it(${JSON.stringify(t.tests[i].desc)}, () => {`);
    console.log(`    expect(policy(${JSON.stringify(t.tests[i].input)}, ${JSON.stringify(t.tests[i].data)})).to.deep.equal(${JSON.stringify({result: t.goldens[i]})});`);
    console.log(`  });`);
  }
  console.log(`});`);
});
