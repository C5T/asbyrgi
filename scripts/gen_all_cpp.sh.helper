#!/bin/bash

JSOPA_CONTAINER_ID=$1
REGO="$2"

HEADER=$(head -n 1 "$REGO")

SCRIPT_DIR="$(dirname "${BASH_SOURCE[0]}")"

if [[ "$HEADER" =~ \#!TEST ]] ; then
  read -r UNUNSED_TEST PACKAGE RULE <<< "$HEADER"
  NAME=$(basename "$REGO")
  DIR=$(dirname "$REGO")

  echo -n "Creating '$REGO.stage1.cpp' ..."
  if (cd "$DIR"; cat "$NAME" | docker run -i $JSOPA_CONTAINER_ID rego2cpp $PACKAGE $RULE | clang-format-10 - | grep -v '^$' >"$NAME.stage1.cpp") ; then
    echo -e "\b\b\b\b: Done."
    echo -n "Creating '$REGO.stage2.cpp'"
    (cat "$SCRIPT_DIR/ir2cpp_before.cc" "$DIR/$NAME.stage1.cpp" "$SCRIPT_DIR/ir2cpp_after.cc" >"$DIR/$NAME.stage2.cpp")
    echo -e ": Done."
    echo -n "Creating '$REGO.stage3.cpp' ..."
    if g++ -std=c++17 "$DIR/$NAME.stage2.cpp" && ./a.out | clang-format-10 - >"$DIR/$NAME.stage3.cpp" ; then
      echo -e "\b\b\b\b: Done."
    else
      echo 'Failed.'
      exit 1
    fi
    # TODO: This is a dirty hack, of course. Run this policy from within C++.
    (cat "$SCRIPT_DIR/ir2cpp_runner_before.cc" "$DIR/$NAME.stage3.cpp" "$SCRIPT_DIR/ir2cpp_runner_after.cc" >"$DIR/$NAME.stage4.cpp")
    echo -n "Creating '$REGO.stage4.cpp.goldens.json' ..."
    if g++ -I. -std=c++17 "$DIR/$NAME.stage4.cpp" && cat "$DIR/tests.json" | ./a.out >"$DIR/$NAME.stage4.cpp.goldens.json" ; then
      echo -e "\b\b\b\b: Done."
    else
      echo 'Failed.'
      exit 1
    fi
    # TODO: And this is an even more dirty hack.
    echo "Diffing vs. the golden!"
    diff "$DIR/$NAME.stage4.cpp.goldens.json" "$DIR/$NAME.goldens.json" && echo "OK!" || echo "Test failed."
  else
    echo 'Failed.'
    exit 1
  fi
else
  echo "No '#!TEST' directive in '$REGO', skipping the file."
fi
