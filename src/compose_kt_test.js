if (process.argv.length < 2) {
  console.log('Synopsis: [ ... lines of "$INPUT\t$OUTPUT" ... ] | node compose_kt_test.js KotlinIdentifiedName')
  console.log(process.argv);
  process.exit(1);
}

const readline = require('readline');

const kotlin_export = process.argv[process.argv.length - 1];

let i = 0;

const rl = readline.createInterface({ input: process.stdin });
rl.on('line', (line) => {
  const fields = line.split('\t');
  if (fields.length !== 2) {
    console.error('Need two tab-separated fields on each line: the input and the output.');
    process.exit(1);
  }

  if (!i) {
    console.log('import kotlinx.serialization.json.Json');
    console.log('import org.junit.jupiter.api.Assertions.assertEquals');
    console.log('import org.junit.jupiter.api.Test');
    console.log('import org.junit.jupiter.api.DisplayName');
    console.log('');
    console.log(`fun run${kotlin_export}TestCase(goldenJson: String, inputJson: String) {`);
    console.log('    assertEquals(');
    console.log('        goldenJson,');
    console.log('        authzValueToJson(');
    console.log(`            ${kotlin_export}(`);
    console.log('                jsonToAuthzValue(Json.parseToJsonElement(inputJson)),');
    console.log('                AuthzValue.UNDEFINED,');
    console.log('            ),');
    console.log('        ).toString(),');
    console.log('    )');
    console.log('}');
    console.log('');
    console.log('// NOTE: The tests below, at least originally, were autogenerated from `tests.json` and from OPA\'s golden outputs.');
    console.log(`class ${kotlin_export}Test {`);
  } else {
    console.log('');
  }
  console.log('    @Test');
  console.log(`    @DisplayName("""${fields[0]}""")`);
  console.log(`    fun test${kotlin_export}${++i}() = ` +
              `run${kotlin_export}TestCase("""{"result":${fields[1]}}""", ` +
              `"""${fields[0]}""")`);
});

rl.once('close', () => {
  if (i) {
    console.log(`}`);
  }
});
